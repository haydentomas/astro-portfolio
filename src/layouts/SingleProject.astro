---
import Header from "../components/Header.astro"
import Footer from "../components/Footer.astro"
import PrimaryMeta from "../components/PrimaryMeta.astro"
import { getFormattedImageURL } from "../utils/image";
import '../styles/global.css';

import { Picture } from "astro:assets"; // Import Astro's built-in image component
const { frontmatter, current } = Astro.props;

const rootUrl = new URL(Astro.url).origin
const canonicalURL = new URL(Astro.url.pathname, Astro.site);


---


<html lang="en">
<head>
  <PrimaryMeta title={frontmatter.title} description={frontmatter.description} />
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={frontmatter.title} />
<meta property="og:description" content={frontmatter.description} />
<meta property="og:image" content={rootUrl + frontmatter.image.src} />
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={frontmatter.title} />
<meta property="twitter:description" content={frontmatter.description} />
<meta property="twitter:image" content={rootUrl + frontmatter.image.src} />
<!-- Font preloads -->
<link rel="preload" href="/fonts/cabin/cabin-latin-400-normal.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/merriweather/merriweather-latin-400-normal.woff" as="font" type="font/woff" crossorigin />




</head>
<body>
  <div class="layout dark:bg-gray-900">

    <Header current={current} />

    <main class="prose min-w-full dark:prose-headings:text-white dark:prose-a:text-white dark:prose-strong:text-white dark:prose-li:text-white marker:text-teal-500 dark:prose-td:text-white">
 
    
   <div class="container">


    <section class="hero grid py-8 mx-auto lg:gap-20 xl:gap-0 lg:py-16 lg:grid-cols-12">
      <div class="lg:col-span-12 grid justify-center not-prose">
        <h1 class="border-dotted border-8  border-l-0  max-w-max  border-r-0 border-t-0 pb-5 border-teal-500">{frontmatter.title}</h1>
        </div>
        </section>
<section class="grid lg:grid-cols-2 lg:gap-20">
  <div class="column">     {
    frontmatter.image && ( 
    <Picture
class="rounded-xl text-center"
src={frontmatter.image} 
alt={frontmatter.imageAlt} 
formats={["avif", "webp"]}
sizes="(max-width: 800px) 100vw, 800px"
/>
    )
  }</div>
  <div class="column">
   
    <p>{frontmatter.description}</p>
    <p>{frontmatter.Section1Content}</p>
    <p>Our work included:</p>
    <ul class="mt-2 text-m mb-5"> 
      {frontmatter.whatwedid?.map((item: string) => ( // Assert item to be string
        <li class="text-gray-700 dark:text-white">{item}</li>
      ))}
    </ul>
  
  </div>

</section>
    
    <slot />





   </div>
   
  </main>
 
  </div>

   <Footer />
  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.0/flowbite.min.js"></script>
  <script is:inline>
    // On page load or when changing themes, best to add inline in `head` to avoid FOUC
    if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
    } else {
        document.documentElement.classList.remove('dark')
    }
</script>
<script is:inline>
 var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

// Change the icons inside the button based on previous settings
if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    themeToggleLightIcon.classList.remove('hidden');
} else {
    themeToggleDarkIcon.classList.remove('hidden');
}

var themeToggleBtn = document.getElementById('theme-toggle');

themeToggleBtn.addEventListener('click', function() {

    // toggle icons inside button
    themeToggleDarkIcon.classList.toggle('hidden');
    themeToggleLightIcon.classList.toggle('hidden');

    // if set via local storage previously
    if (localStorage.getItem('color-theme')) {
        if (localStorage.getItem('color-theme') === 'light') {
            document.documentElement.classList.add('dark');
            localStorage.setItem('color-theme', 'dark');
        } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('color-theme', 'light');
        }

    // if NOT set via local storage previously
    } else {
        if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('color-theme', 'light');
        } else {
            document.documentElement.classList.add('dark');
            localStorage.setItem('color-theme', 'dark');
        }
    }
    
});
  </script>
</body>

</html>

<style>
  .layout {
    display: flex;
    flex-direction: column;
    min-height: 100%;
    min-height: 100vh;
  }

  main{
    flex: 1;
    position: relative;
    margin: 0 auto;
    box-sizing: border-box;
    width: 100%;
    display: flex;
    flex-direction: column;
  }

  ol::marker {
    color: #fff
  }
</style>
