---

import { getCollection } from 'astro:content';
import { Picture } from 'astro:assets';

import ProjectButton from '../components/ProjectButton.astro';

import Icon from '../components/Icon.astro';



// Define a type for the individual post item (adjusted)
type PostItem = {
    data: {
        title: string;
        subTitle: string;
        description: string;
        image: any; // Use a generic type for the image property
        imageAlt: string;
        pubDate?: string; // Make pubDate optional
        icons?: string[]; // Add the icons property here
        whatwedid?: string[]; // Add the icons property here
    };
    slug: string;
};

// Fetch the latest 3 posts (replace 'posts' with your actual collection name if different)
const posts = await getCollection('posts', ({ data }) => data.draft !== true);
posts.sort((a, b) => {
    const dateA = a.data.pubDate ? new Date(a.data.pubDate) : new Date(0);
    const dateB = b.data.pubDate ? new Date(b.data.pubDate) : new Date(0);
    return dateB.getTime() - dateA.getTime();
});
const latestPosts = posts.slice(0, 3) as unknown as PostItem[]; // Type assertion








// Fetch the latest 3 posts (replace 'posts' with your actual collection name if different)
const projects = await getCollection('projectstagged', ({ data }) => data.draft !== true);
projects.sort((a, b) => {
    const dateA = a.data.pubDate ? new Date(a.data.pubDate) : new Date(0);
    const dateB = b.data.pubDate ? new Date(b.data.pubDate) : new Date(0);
    return dateB.getTime() - dateA.getTime();
});
const latestProjects = projects.slice(0, 2) as unknown as PostItem[]; // Type assertion













---


<div class="grid grid-cols-12 gap-6">
   {latestProjects.map(({ data, slug }, index) => (
     <div class="relative col-span-12 mb-10 space-y-4">
       <div class="flex flex-col md:flex-row items-center ">
         {index % 2 === 0 ? (
           <>
             <a href={`/project/${slug}`} class="relative block w-full h-full md:w-1/2">
               <Picture formats={['avif', 'webp']} loading="lazy" src={data.image} alt={data.imageAlt} width="651" height="795" class="mb-10" loading="lazy"/>
             </a>
             <div class="flex flex-col justify-between p-4 md:w-1/2 lg:pl-8">
               {/* Content section */}
               
                 <h2 class="mb-4 text-4xl tracking-tight">{data.title}</h2>
             
               <p class="mb-3 text-m">{data.description}</p>
               <ul class="mt-2 text-m mb-5"> 
     {data.whatwedid?.map((item) => (
       <li>{item}</li>
     ))}
   </ul>
               <div class="flex gap-2 mb-5 icons">
                 {data.icons?.map(icon => <Icon name={icon} />)}
               </div>
             <div class="block">
               <ProjectButton href={`/project/${slug}/`} aria={data.title}>View Project</ProjectButton>
             </div>
             </div>
           </>
         ) : (
           <>
             <div class="flex flex-col justify-between p-4 md:w-1/2 lg:pr-8">
             
              
                 <h2 class="mb-4 text-4xl">{data.title}</h2>
                
               <p class="mb-3 text-m">{data.description}</p>
               <ul class="mt-2 text-m mb-5"> 
     {data.whatwedid?.map((item) => (
       <li>{item}</li>
     ))}
   </ul>
               <div class="flex gap-2 mb-5 icons">
                 {data.icons?.map(icon => <Icon name={icon} />)}
               </div>
             <div class="block">
               <ProjectButton href={`/project/${slug}`} aria={data.title}>View Project</Button>
             </div>
             </div>
             <a href={`/project/${slug}`} class="relative block w-full h-full md:w-1/2">
               <Picture formats={['avif', 'webp']} loading="lazy" src={data.image} alt={data.imageAlt} width="651" height="795" class="mb-10" />
             </a>
           </>
         )}
       </div>
     </div>
   ))}
 </div>


