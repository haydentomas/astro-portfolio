---
import { getCollection } from 'astro:content';
import PostLayout from '../../layouts/SingleProject.astro';
import Icon from '../../components/Icon.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('projectstagged');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, 
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Fetch ALL posts
const allPosts = await getCollection("projectstagged");

// Filter posts based on tag (if applicable)
const postsWithTag = entry.data.tags
  ? allPosts.filter(post => post.data.tags && post.data.tags.includes(entry.data.tags[0]))
  : allPosts; // If no tags, use all posts

// Sort the filtered posts
const sortedPosts = postsWithTag.sort(
  (a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

const findCurrentPostIndex = (slug: string) => {
  // Find index within the filtered and sorted posts
  return sortedPosts.findIndex(post => post.slug === slug);
};

const currentSlug = Astro.params.slug; 
const currentIndex = findCurrentPostIndex(currentSlug);

// Get neighboring posts from the filtered and sorted array
const previousPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : null;
const nextPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : null;


---




<PostLayout frontmatter={entry.data}>


  <div class="iconblock flex gap-2 mt-2 bg-slate-800 p-0 rounded-lg pl-5 pt-0 mb-10"> 
   {entry.data.icons?.map(icon => <Icon name={icon} />)}
  </div>

  <Content />

  <div class="w-auto mx-auto text-center mt-8">

  {/* Only show Previous if it exists and is NOT the first post */}
  {previousPost && (
    <a href={`/project/${previousPost.slug}`} class=" prevpost block text-left"> <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m14 8-4 4 4 4"/>
</svg> Previous: {previousPost.data.title}</a>
  )}
  
  {/* Only show Next if it exists and is NOT the last post */}
  {nextPost && (
    <a href={`/project/${nextPost.slug}`} class=" nextpost block text-right"> Next: {nextPost.data.title} <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m10 16 4-4-4-4"/>
</svg></a>
  )}
</div>

</PostLayout>

<style>
  .iconblock{
  


    img {
      width: 30px;
      height: 30px;

    }
  }

  .prevpost {

display:flex;
float:left;
align-items:center;
}

.nextpost {

display:flex;
align-items:center;
float:right;
}
</style>