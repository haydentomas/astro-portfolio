---
import { getCollection } from 'astro:content';
import { Picture } from 'astro:assets';
import MainLayout from '../../layouts/MainLayout.astro';

// Define a basic structure for the pagination result
type PaginationResult = {
    currentPage: number;
    lastPage: number;
    data: any[]; // Adjust the type to match the structure of your paginated items
    url: {
        prev?: string;
        next?: string;
    };
};


type PaginateFunction = (items: any[], config: { pageSize: number }) => Promise<PaginationResult>;

    export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const allPages = await getCollection('posts', ({ data }) => {
    return data.draft !== true; // Filter out drafts
  });

  // Sort the pages array by pubDate (descending order - newest first)
  allPages.sort((a, b) => {
    // Handle cases where pubDate might be missing or invalid
    const dateA = a.data.pubDate ? new Date(a.data.pubDate) : new Date(0);
    const dateB = b.data.pubDate ? new Date(b.data.pubDate) : new Date(0);
    return dateB.getTime() - dateA.getTime();
  });

  return paginate(allPages, { pageSize: 3 }); // Adjust pageSize as needed
}





const { page }: { page: PaginationInfo } = Astro.props;
const { prev, next } = page.url;

// Define a type for the pagination information
type PaginationInfo = {
    currentPage: number;
    lastPage: number;
    data: PostItem[];
    url: {
        prev?: string;
        next?: string;
    };
};


// Define a type for the individual post item
type PostItem = {
    data: {
        title: string;
        description: string;
        image: string;
        imageAlt: string;
        pubDate?: string; // Make pubDate optional
    };
    slug: string;
};



const title = 'Blog Hayden Tomas - Website Developer';
const description = 'A UK Based front-end developer who focuses on building fast, secure websites that are accessible to all.';
const Name = 'Hayden Tomas - Website Developer';
---
<MainLayout title={title} description={description}>
    <main>

        <div class="max-w-md mx-auto">
            {page.data.map(({ data, slug }) => (
                <a href={`/posts/${slug}`} class="block text-black no-underline">
                    <div class="bg-gray-200 rounded-lg border border-gray-300 p-4 my-2">
                        <h3 class="text-xl font-bold">{data.title}</h3>
                   {data.pubDate && ( /* Conditionally display pubDate if it exists */
                            <p class="pub-date">Published: {new Date(data.pubDate).toLocaleDateString()}</p>
                        )}
                        <p>{data.description}</p>
                        <div class="flex justify-center items-center h-full">
                            <Picture formats={['avif', 'webp']} src={data.image} alt={data.imageAlt} height="200" width="300" class="m-auto"/>
                        </div>
                    </div>
                </a>
            ))}
        </div>
    
        <div class="text-center">
            <p>Page {page.currentPage} of {page.lastPage}</p>
    
            <div class="text-center">
                {prev && <a href={prev} class="inline-block mr-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700">Previous Page</a>}
                {next && <a href={next} class="inline-block bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700">Next Page</a>}
            </div>
        </div>
    </main>
    
</MainLayout>
